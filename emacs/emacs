(add-to-list 'load-path "~/.emacs.d/lib/")
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(load-theme 'tango-dark)
(fringe-mode 0)

(if (string-equal "darwin" (symbol-name system-type))
    (setenv "PATH" (concat "$HOME/bin:/usr/local/bin:" (getenv "PATH"))))

;; use emacsclient as the default editor
(setenv "EDITOR" "emacsclient -a emacs")

;; don't use the git pager by default
(setenv "GIT_PAGER" "")

;; let eshell modify global environment variables
(setq eshell-modify-global-environment t)

;; always show trailing whitespace
(setq-default show-trailing-whitespace t)
;; except in eshell
(add-hook 'eshell-mode-hook
          (lambda ()
            (setq show-trailing-whitespace nil)))

;; always use tabs
(setq-default indent-tabs-mode nil)

;; goto-line for old emacs
(global-set-key (kbd "M-g")   'goto-line)

;; always use fullscreen
(set-frame-parameter nil 'fullscreen 'fullboth)

;; set up package repos
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")))

;; add subdirectories of the lib directory
(let ((default-directory "~/.emacs.d/lib/"))
  (normal-top-level-add-subdirs-to-load-path))

(require 'js2-mode)
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))

;; groovy-mode
(require 'groovy-mode)
(add-hook 'groovy-mode-hook
          (lambda ()
            (setq c-basic-offset 4)))
(add-to-list 'auto-mode-alist '("\\.groovy$" . groovy-mode))

;; json-reformat
(require 'json-reformat)

;; multiple cursors!!
(require 'multiple-cursors)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

;; use aspell for MacOS
(setq ispell-program-name "aspell")

;; multi-term
(require 'multi-term)
(setq multi-term-program "/bin/bash")

;; transpose-frame
(require 'transpose-frame)
(global-set-key (kbd "C-x }") 'rotate-frame-clockwise)
(global-set-key (kbd "C-x {") 'rotate-frame-anticlockwise)

;; don't start with the typical startup message
(setq inhibit-startup-message t)

;; move emacs backups to a global directory
(setq backup-directory-alist '(("." . "~/.emacs-backups")))

;; clear the buffer in eshell
;; src: http://daily-emacs.blogspot.com/2011/11/clear-in-eshell.html
(defun eshell/clear ()
  "clear the eshell buffer."
  (interactive)
  (let ((inhibit-read-only t))
    (erase-buffer))
)

;; show date and time
(setq display-time-day-and-date t)
(display-time)

;; ido mode on
(ido-mode t)

;; show column numbers
(column-number-mode t)

;; start the emacs server so emacsclient works
(server-start)

;; let's start up with eshell
(eshell)

;; open up a mini-eshell
(defun quarter-window-vertically ()
  "create a new window a quarter size of the current window"
  (split-window-vertically)
  (other-window 1)
  (split-window-vertically)
  (other-window -1)
  (delete-window)
)

(defun open-mini-eshell ()
  "open a mini-eshell in a small window at the bottom of the current window"
  (interactive)
  (quarter-window-vertically)
  (other-window 1)
  (eshell)
)

(global-set-key (kbd "C-x 7") 'open-mini-eshell)
