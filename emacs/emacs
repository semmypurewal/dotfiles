(add-to-list 'load-path "~/.emacs.d/lib/")
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(load-theme 'tango-dark)
(fringe-mode 0)

;; (require 'fill-column-indicator)
;; (setq-default fill-column 80)

(if (string-equal "darwin" (symbol-name system-type))
    (setenv "PATH" (concat (getenv "HOME") "/bin:/usr/local/bin:" (getenv "PATH"))))

(if (string-equal "gnu/linux" (symbol-name system-type))
    (setenv "PATH" (concat (getenv "HOME") "/bin:/usr/local/bin:" (getenv "PATH"))))

;; use emacsclient as the default editor
(setenv "EDITOR" "emacsclient -a emacs")

;; don't use the git pager by default
(setenv "GIT_PAGER" "")

;; let eshell modify global environment variables
(setq eshell-modify-global-environment t)

;; always show trailing whitespace
(setq-default show-trailing-whitespace t)
;; except in eshell
(add-hook 'eshell-mode-hook
          (lambda ()
            (setq show-trailing-whitespace nil)))

;; always use tabs
(setq-default indent-tabs-mode nil)

;; goto-line for old emacs
(global-set-key (kbd "M-g")   'goto-line)

;; always use fullscreen
(set-frame-parameter nil 'fullscreen 'fullboth)

;; set up package repos
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")))

;; add subdirectories of the lib directory
(let ((default-directory "~/.emacs.d/lib/"))
  (normal-top-level-add-subdirs-to-load-path))

(require 'js2-mode)
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))

;; groovy-mode
(require 'groovy-mode)
(add-hook 'groovy-mode-hook
          (lambda ()
            (setq c-basic-offset 4)))
(add-to-list 'auto-mode-alist '("\\.groovy$" . groovy-mode))

;; json-reformat
(require 'json-reformat)

;; multiple cursors!!
(require 'multiple-cursors)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)

;; use aspell for MacOS
(setq ispell-program-name "aspell")

;; multi-term
(require 'multi-term)
(setq multi-term-program "/bin/bash")

;; transpose-frame
(require 'transpose-frame)
(global-set-key (kbd "C-x }") 'rotate-frame-clockwise)
(global-set-key (kbd "C-x {") 'rotate-frame-anticlockwise)

;; don't start with the typical startup message
(setq inhibit-startup-message t)

;; move emacs backups to a global directory
(setq backup-directory-alist '(("." . "~/.emacs-backups")))

;; show date and time
(setq display-time-day-and-date t)
(display-time)

;; ido mode on
(ido-mode t)

;; show column numbers
(column-number-mode t)

;; start the emacs server so emacsclient works
(server-start)

;; let's start up with eshell
(eshell)

;; open up a mini-eshell
(defun quarter-window-vertically ()
  "create a new window a quarter size of the current window"
  (split-window-vertically)
  (other-window 1)
  (split-window-vertically)
  (other-window -1)
  (delete-window)
)

(defun open-mini-eshell ()
  "open a mini-eshell in a small window at the bottom of the current window"
  (interactive)
  (quarter-window-vertically)
  (other-window 1)
  (eshell)
)

;; great stuff: http://www.howardism.org/Technical/Emacs/eshell-fun.html
(defun eshell-here ()
  "Opens up a new shell in the directory associated with the
current buffer's file. The eshell is renamed to match that
directory to make multiple eshell windows easier."
  (interactive)
  (let* ((parent (if (buffer-file-name)
                     (file-name-directory (buffer-file-name))
                   default-directory))
         (height (/ (window-total-height) 3))
         (name   (car (last (split-string parent "/" t)))))
    (split-window-vertically (- height))
    (other-window 1)
    (eshell "new")
    (rename-buffer (concat "*eshell: " name "*"))

    (insert (concat "ls"))
    (eshell-send-input)))

;; this seems buggy, will troubleshoot later
;;(defun eshell/x ()
;;  (insert "exit")
;;  (eshell-send-input)
;;  (delete-window))

;; clear the buffer in eshell
;; src: http://daily-emacs.blogspot.com/2011/11/clear-in-eshell.html
(defun eshell/clear ()
  "clear the eshell buffer."
  (interactive)
  (let ((inhibit-read-only t))
    (erase-buffer))
)

(global-set-key (kbd "C-x 7") 'eshell-here)

;; (add-to-list 'auto-mode-alist '("\\.js" . web-mode))
;; (defadvice web-mode-highlight-part (around tweak-jsx activate)
;;   (if (equal web-mode-content-type "js")
;;       (let ((web-mode-enable-part-face nil))
;;         ad-do-it)
;;     ad-do-it))

;; shamelessly stolen from http://www.warmenhoven.org/src/emacs.el/ew-window.el.html
(defun eaw-fix-fullscreen ()
  ;; (set-frame-parameter nil 'fullscreen (when (not (frame-parameter nil 'fullscreen)) 'fullboth))
  (interactive)
    (set-frame-parameter nil 'tool-bar-lines 1)
    (set-frame-parameter nil 'tool-bar-lines 0)
    ;; first, try to figure out how big a line/column is
    (let (old-width old-height new-width new-height)
      (setq old-width (frame-pixel-width))
      (setq old-height (frame-pixel-height))
      (set-frame-parameter nil 'width (+ 1 (frame-parameter nil 'width)))
      (set-frame-parameter nil 'height (+ 1 (frame-parameter nil 'height)))
      (setq new-width (frame-pixel-width))
      (setq new-height (frame-pixel-height))
      ;; now that we know how big a column is, try to jump immediately to the right size
      (set-frame-parameter nil 'width (/ (x-display-pixel-width) (- new-width old-width)))
      (set-frame-parameter nil 'height (/ (x-display-pixel-height) (- new-height old-height))))
    ;; we're probably at the right size, but we may be very far off
    ;; (e.g. different size fonts, etc.). so, first, we'll make sure
    ;; the frame is definitely smaller than the screen
    (while (< (x-display-pixel-width) (frame-pixel-width))
      (set-frame-parameter nil 'width (- (frame-parameter nil 'width) 1)))
    (while (< (x-display-pixel-height) (frame-pixel-height))
      (set-frame-parameter nil 'height (- (frame-parameter nil 'height) 1)))
    ;; now try to make it just slightly bigger
    (while (> (x-display-pixel-width) (frame-pixel-width))
      (set-frame-parameter nil 'width (+ 1 (frame-parameter nil 'width))))
    (while (> (x-display-pixel-height) (frame-pixel-height))
      (set-frame-parameter nil 'height (+ 1 (frame-parameter nil 'height))))
    ;; now shrink it back to the appropriate size
    (if (< (x-display-pixel-width) (frame-pixel-width))
        (set-frame-parameter nil 'width (- (frame-parameter nil 'width) 1)))
    (if (< (x-display-pixel-height) (frame-pixel-height))
        (set-frame-parameter nil 'height (- (frame-parameter nil 'height) 1))))
